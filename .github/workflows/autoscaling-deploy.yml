name: Deploy to Auto Scaling Group

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'  # 애플리케이션 코드 변경 감지
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'  # 애플리케이션 코드 변경 감지

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET: istory-deploy-bucket
  APP_NAME: istory-app
  DEPLOY_GROUP: istory-deploy-group
  ALB_LISTENER_ARN: ${{ secrets.ALB_LISTENER_ARN }}
  ALB_TARGET_GROUP_ARN: ${{ secrets.ALB_TARGET_GROUP_ARN }}
  DEPLOYMENT_CONFIG: CodeDeployDefault.OneAtATime  # 롤링 업데이트 설정

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp build/libs/*.jar deploy/
          cp scripts/*.sh deploy/
          chmod +x deploy/*.sh
          cd deploy
          zip -r ../deploy.zip .

      - name: Upload to S3
        run: |
          aws s3 cp deploy.zip s3://${{ env.S3_BUCKET }}/deploy.zip

      - name: Create CodeDeploy deployment
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.APP_NAME }} \
            --deployment-group-name ${{ env.DEPLOY_GROUP }} \
            --deployment-config-name ${{ env.DEPLOYMENT_CONFIG }} \
            --s3-location bucket=${{ env.S3_BUCKET }},bundleType=zip,key=deploy.zip

      - name: Wait for deployment
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ env.APP_NAME }} \
            --deployment-group-name ${{ env.DEPLOY_GROUP }} \
            --deployment-config-name ${{ env.DEPLOYMENT_CONFIG }} \
            --s3-location bucket=${{ env.S3_BUCKET }},bundleType=zip,key=deploy.zip \
            --query 'deploymentId' --output text)
          
          aws deploy wait deployment-successful \
            --deployment-id $DEPLOYMENT_ID \
            --application-name ${{ env.APP_NAME }}

      - name: Health check
        run: |
          # ALB 상태 확인
          aws elbv2 describe-target-health \
            --target-group-arn ${{ env.ALB_TARGET_GROUP_ARN }} \
            --query 'TargetHealthDescriptions[*].TargetHealth.State' \
            --output text | grep -q "healthy" 